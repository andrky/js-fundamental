===
JavaScript menerapkan Case Sensitive

===
Commenting pada JS menggunakan 
Single line : //
Multi line  : /** */

===
Hosting merupakan kondisi dimana dapat melakukan pemanggilan (mengangkat) variable ketika variable tersebut belum di definisikan atau diinisialisasi
Perbedaan var, let dan const dalam hoisting, var bisa melakukan hoisting sedangkan let dan const tidak

===
Scope dalam Javascript adalah konteks atau ruang lingkup di mana variabel, fungsi, dan objek tersedia dalam kode.
var : var dapat dipanggil dari luar scope (global scope)
let : let tidak dapat dipanggil dari luar scope (block scope)

var dan let merupakan functional scope, variable tidak bisa diakses dari luar fungsi

===
String, bisa menggunakan "", '', dan ``. Jika menggunakan "" atau '' ingin menambahkan line baru bisa menggunakan \n, sedangkan jika menggunakan `` tidak perlu \n

String concatenes
"" dan '' bisa menggunakan :
let namaDepan = "Bambang";
let namaBelakang = "Setiawan";
let namaLengkap = namaDepan + ' ' + namaBelakang

`` bisa menggunakan :
let namaLengkap = `${namaDepan} ${namaBelakang} 

===
Coercion
Selain operator + maka akan dilakukan proses perhitungan. Jika menggunakan operator + maka akan dianggap concatenes

===
Comparasion
== (Loose Comparasion) : Hanya membandingkan value saja
=== (Strict Comparasion) : Membandingkan value dan tipe 

===
Function
Jika argumen tidak diberikan nilai untuk mengisi parameter, maka nilai pada parameter adalah undefined
// Function Definition
Tidak bisa hoisting (dipanggil) sebelum fungsi
const perpangkatan = function (n) {
  return n * n;
}

// Function Declaration
Bisa boisting (dipanggil) sebelum fungsi
function pangkat(n) {
  return n * n;
}

function sayHello(n) {
  alert('Halo');

  return n;
}

// Arrow Function
const tes = (n) => {
  return n * n;
}

const tes = n => n * n;

console.log(perpangkatan(5));

===
Array Methods
Push : Menambahkan value array di belakang
Pop  : Mengahpus value array di belakang, dan mereturn nilai yang dihapus
Unshift : Menambahkan value array di depan
Shift   : Menghapus value array di depan, dan mereturn nilai yang dihapus 
