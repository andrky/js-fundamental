===
JavaScript menerapkan Case Sensitive
Function bisa menjadi parameter

===
Commenting pada JS menggunakan 
Single line : //
Multi line  : /** */

===
Hosting merupakan kondisi dimana dapat melakukan pemanggilan (mengangkat) variable ketika variable tersebut belum di definisikan atau diinisialisasi
Perbedaan var, let dan const dalam hoisting, var bisa melakukan hoisting sedangkan let dan const tidak

===
Scope dalam Javascript adalah konteks atau ruang lingkup di mana variabel, fungsi, dan objek tersedia dalam kode.
var : var dapat dipanggil dari luar scope (global scope)
let : let tidak dapat dipanggil dari luar scope (block scope)

var dan let merupakan functional scope, variable tidak bisa diakses dari luar fungsi

===
String, bisa menggunakan "", '', dan ``. Jika menggunakan "" atau '' ingin menambahkan line baru bisa menggunakan \n, sedangkan jika menggunakan `` tidak perlu \n

String concatenes
"" dan '' bisa menggunakan :
let namaDepan = "Bambang";
let namaBelakang = "Setiawan";
let namaLengkap = namaDepan + ' ' + namaBelakang

`` bisa menggunakan :
let namaLengkap = `${namaDepan} ${namaBelakang} 

===
Coercion
Selain operator + maka akan dilakukan proses perhitungan. Jika menggunakan operator + maka akan dianggap concatenes

===
Comparasion
== (Loose Comparasion) : Hanya membandingkan value saja
=== (Strict Comparasion) : Membandingkan value dan tipe 

===
Function
Jika argumen tidak diberikan nilai untuk mengisi parameter, maka nilai pada parameter adalah undefined
// Function Definition
Tidak bisa hoisting (dipanggil) sebelum fungsi
const perpangkatan = function (n) {
  return n * n;
}

// Function Declaration
Bisa boisting (dipanggil) sebelum fungsi
function pangkat(n) {
  return n * n;
}

function sayHello(n) {
  alert('Halo');

  return n;
}

// Arrow Function
const tes = (n) => {
  return n * n;
}

const tes = n => n * n;

console.log(perpangkatan(5));

===
Array Methods
Push : Menambahkan value array di belakang
Pop  : Mengahpus value array di belakang, dan mereturn nilai yang dihapus
Unshift : Menambahkan value array di depan
Shift   : Menghapus value array di depan, dan mereturn nilai yang dihapus
Slice   : Mengambil copy value dari array dan menyimpannya ke dalam variable jika ingin mereturn value yang diambil
Splice  : Menghapus atau mengganti isi value dari array 
ForEach : Melakukan looping data saja
Map     : Melakukan looping data dan mereturn array baru
Filter  : Melakukan filter value yang akan mereturn hasil filter berdasarkan kondisi yang di buat

=== Object
Jika ingin menghapus object gunakan "delete" disertai dengan keynya
Object.keys : Akan mereturn sebuah array berisi key
Object.assign : Akan menggabungkan 2 object, dengan menimpa object target dengan object yang akan digabungkan

===
Scope
Global : Variable yang berada di luar fungsi
Local  : Variable yang berada di dalam fungsi

var dalam local scope bisa diakses jika melakukan aksesnya keluar fungsi, bukan ke dalam fungsi

===
Hoisting
Hosting berlaku untuk deklarasi variable var, dan tidak berlaku pada value yang di inisialisasi. Jika melakukan re-assign bisa dilakukan hoisting

Berlaku juga pada fungsi yang menggunakan variable var di dalamnya

===
EventListener
Berfungsi untuk mentrigger sebuah fungsi ketika melakukan klik atau melakukan pengetikan

Default browser ketika melakukan action adalah merefresh halaman, supaya halamn tidak di refresh bisa menggunakan e.preventDefault();

append.child berfungsi untuk menambahkan element, jika pada suatu element ingin menambahkan 2 element baru, element pertama menggunakan append child dan element 2 dst menggunakan innerHTML supaya tidak menimpa children yang pertama

Sebuah element input ketika disubmit akan menjadi object dari element tersebut dan akan menjadi value